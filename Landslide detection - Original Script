{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":11763233,"sourceType":"datasetVersion","datasetId":7384667}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# 1. SETUP AND IMPORTS","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# 1. SETUP AND IMPORTS\n# =============================================================================\n\nimport os\nimport zipfile\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\n\n# TensorFlow/Keras imports\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, Model, callbacks\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.metrics import F1Score\n\n# Scikit-learn imports\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix, f1_score\nfrom sklearn.utils.class_weight import compute_class_weight\n\n# Set random seeds for reproducibility\ntf.random.set_seed(42)\nnp.random.seed(42)\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-08-01T10:47:26.038976Z","iopub.execute_input":"2025-08-01T10:47:26.039231Z","iopub.status.idle":"2025-08-01T10:47:46.866374Z","shell.execute_reply.started":"2025-08-01T10:47:26.039209Z","shell.execute_reply":"2025-08-01T10:47:46.865605Z"}},"outputs":[{"name":"stderr","text":"2025-08-01 10:47:29.097558: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1754045249.472532      36 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1754045249.581149      36 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"TensorFlow version: 2.18.0\nGPU Available: [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU')]\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# Configure GPU memory growth (if available)\nphysical_devices = tf.config.experimental.list_physical_devices('GPU')\nfor gpu in physical_devices:\n    tf.config.experimental.set_memory_growth(gpu, True)\n\nprint(\"TensorFlow version:\", tf.__version__)\nprint(\"GPU Available:\", tf.config.list_physical_devices('GPU'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T11:08:57.463693Z","iopub.execute_input":"2025-08-01T11:08:57.463984Z","iopub.status.idle":"2025-08-01T11:08:57.469155Z","shell.execute_reply.started":"2025-08-01T11:08:57.463963Z","shell.execute_reply":"2025-08-01T11:08:57.468326Z"}},"outputs":[{"name":"stdout","text":"TensorFlow version: 2.18.0\nGPU Available: [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU'), PhysicalDevice(name='/physical_device:GPU:1', device_type='GPU')]\n","output_type":"stream"}],"execution_count":15},{"cell_type":"markdown","source":"# 2. DATA LOADING AND PREPROCESSING","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# 2. DATA LOADING AND PREPROCESSING\n# =============================================================================\n\n# Data extraction not needed in Kaggle - data is already available\n\ndef load_data(df, data_path, is_train=True):\n    \"\"\"\n    Load satellite imagery data from .npy files\n    \n    Args:\n        df: DataFrame containing image IDs (and targets if training)\n        data_path: Path to directory containing .npy files\n        is_train: Boolean indicating if this is training data\n    \n    Returns:\n        X_optical: Optical imagery data (R, G, B, NIR) - shape (n, 128, 128, 4)\n        X_sar: SAR imagery data (VV, VH) - shape (n, 128, 128, 2)\n        y: Labels (only if is_train=True)\n    \"\"\"\n    print(f\"Loading {'training' if is_train else 'test'} data from {data_path}...\")\n    \n    # Initialize lists to store data\n    optical_data = []\n    sar_data = []\n    labels = []\n    \n    # Load each image\n    for idx, row in df.iterrows():\n        image_id = row['ID']\n        file_path = os.path.join(data_path, f\"{image_id}.npy\")\n        \n        if not os.path.exists(file_path):\n            print(f\"Warning: File {file_path} not found, skipping...\")\n            continue\n            \n        # Load 6-channel image data\n        img_data = np.load(file_path)  # Shape: (128, 128, 6)\n        \n        # Split into optical and SAR channels\n        optical_channels = img_data[:, :, :4]  # R, G, B, NIR (channels 0-3)\n        sar_channels = img_data[:, :, 4:]       # VV, VH (channels 4-5)\n        \n        optical_data.append(optical_channels)\n        sar_data.append(sar_channels)\n        \n        if is_train:\n            labels.append(row['label'])\n    \n    # Convert to numpy arrays\n    X_optical = np.array(optical_data, dtype=np.float32)\n    X_sar = np.array(sar_data, dtype=np.float32)\n    \n    # Normalize pixel values to [0, 1] range\n    # Note: Satellite imagery may have different value ranges for optical vs SAR\n    X_optical = X_optical / 10000.0  # Typical Sentinel-2 scaling\n    X_sar = X_sar / 100.0           # Typical SAR scaling (adjust based on data range)\n    \n    # Clip values to ensure they're in [0, 1] range\n    X_optical = np.clip(X_optical, 0, 1)\n    X_sar = np.clip(X_sar, 0, 1)\n    \n    print(f\"Loaded {len(X_optical)} images\")\n    print(f\"Optical data shape: {X_optical.shape}\")\n    print(f\"SAR data shape: {X_sar.shape}\")\n    \n    if is_train:\n        y = np.array(labels, dtype=np.int32)\n        print(f\"Labels shape: {y.shape}\")\n        print(f\"Class distribution - Landslide: {np.sum(y)}, No Landslide: {len(y) - np.sum(y)}\")\n        return X_optical, X_sar, y\n    else:\n        return X_optical, X_sar\n\ndef calculate_ndvi(optical_data):\n    \"\"\"\n    Calculate Normalized Difference Vegetation Index (NDVI)\n    NDVI = (NIR - Red) / (NIR + Red)\n    \n    This can help distinguish vegetation from bare soil (potential landslides)\n    \"\"\"\n    nir = optical_data[:, :, :, 3]  # NIR channel\n    red = optical_data[:, :, :, 0]  # Red channel\n    \n    # Avoid division by zero\n    ndvi = np.divide(nir - red, nir + red, \n                     out=np.zeros_like(nir), \n                     where=(nir + red) != 0)\n    \n    # Expand dimensions to match other channels\n    ndvi = np.expand_dims(ndvi, axis=-1)\n    \n    return ndvi","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T10:54:41.739678Z","iopub.execute_input":"2025-08-01T10:54:41.740274Z","iopub.status.idle":"2025-08-01T10:54:41.749358Z","shell.execute_reply.started":"2025-08-01T10:54:41.740250Z","shell.execute_reply":"2025-08-01T10:54:41.748836Z"}},"outputs":[],"execution_count":13},{"cell_type":"markdown","source":"# 3. ADVANCED FEATURE ENGINEERING & AUGMENTATION","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# 3. ADVANCED FEATURE ENGINEERING & AUGMENTATION\n# =============================================================================\n\ndef create_data_augmentation():\n    \"\"\"\n    Create data augmentation layers for improved generalization\n    \"\"\"\n    return keras.Sequential([\n        layers.RandomFlip(\"horizontal_and_vertical\"),\n        layers.RandomRotation(0.2),  # Rotate up to 20% (72 degrees)\n        layers.RandomZoom(0.1),      # Zoom in/out by up to 10%\n        layers.RandomContrast(0.1),  # Adjust contrast by up to 10%\n    ], name=\"data_augmentation\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T10:48:28.580694Z","iopub.execute_input":"2025-08-01T10:48:28.580993Z","iopub.status.idle":"2025-08-01T10:48:28.585384Z","shell.execute_reply.started":"2025-08-01T10:48:28.580971Z","shell.execute_reply":"2025-08-01T10:48:28.584653Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"# 4. MULTI-INPUT MODEL ARCHITECTURE","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# 4. MULTI-INPUT MODEL ARCHITECTURE\n# =============================================================================\n\ndef create_cnn_branch(input_layer, filters_base=32, name_prefix=\"branch\"):\n    \"\"\"\n    Create a CNN branch for processing either optical or SAR data\n    Uses a mini-VGG style architecture with batch normalization\n    \"\"\"\n    x = input_layer\n    \n    # First convolutional block\n    x = layers.Conv2D(filters_base, (3, 3), activation='relu', \n                     padding='same', name=f'{name_prefix}_conv1')(x)\n    x = layers.BatchNormalization(name=f'{name_prefix}_bn1')(x)\n    x = layers.MaxPooling2D((2, 2), name=f'{name_prefix}_pool1')(x)\n    \n    # Second convolutional block\n    x = layers.Conv2D(filters_base * 2, (3, 3), activation='relu', \n                     padding='same', name=f'{name_prefix}_conv2')(x)\n    x = layers.BatchNormalization(name=f'{name_prefix}_bn2')(x)\n    x = layers.MaxPooling2D((2, 2), name=f'{name_prefix}_pool2')(x)\n    \n    # Third convolutional block\n    x = layers.Conv2D(filters_base * 4, (3, 3), activation='relu', \n                     padding='same', name=f'{name_prefix}_conv3')(x)\n    x = layers.BatchNormalization(name=f'{name_prefix}_bn3')(x)\n    x = layers.MaxPooling2D((2, 2), name=f'{name_prefix}_pool3')(x)\n    \n    # Fourth convolutional block\n    x = layers.Conv2D(filters_base * 8, (3, 3), activation='relu', \n                     padding='same', name=f'{name_prefix}_conv4')(x)\n    x = layers.BatchNormalization(name=f'{name_prefix}_bn4')(x)\n    x = layers.GlobalAveragePooling2D(name=f'{name_prefix}_gap')(x)\n    \n    return x\n\ndef build_multi_input_model(optical_shape=(64, 64, 4), sar_shape=(64, 64, 8)):\n    \"\"\"\n    Build multi-input model for fusing optical and SAR satellite imagery\n    \"\"\"\n    # Input layers\n    input_optical = layers.Input(shape=optical_shape, name='optical_input')\n    input_sar = layers.Input(shape=sar_shape, name='sar_input')\n    \n    # Optional: Add data augmentation (uncomment for training with augmentation)\n    # augmentation = create_data_augmentation()\n    # optical_augmented = augmentation(input_optical)\n    # sar_augmented = augmentation(input_sar)\n    \n    # Process optical stream (RGB + NIR)\n    optical_features = create_cnn_branch(input_optical, filters_base=32, name_prefix=\"optical\")\n    \n    # Process SAR stream (VV + VH) - potentially different architecture\n    sar_features = create_cnn_branch(input_sar, filters_base=24, name_prefix=\"sar\")\n    \n    # Fusion: Concatenate features from both streams\n    fused_features = layers.Concatenate(name='feature_fusion')([optical_features, sar_features])\n    \n    # Classifier head with dropout for regularization\n    x = layers.Dense(256, activation='relu', name='fc1')(fused_features)\n    x = layers.Dropout(0.5, name='dropout1')(x)\n    x = layers.Dense(128, activation='relu', name='fc2')(x)\n    x = layers.Dropout(0.3, name='dropout2')(x)\n    \n    # Output layer for binary classification\n    output = layers.Dense(1, activation='sigmoid', name='output')(x)\n    \n    # Create model\n    model = Model(inputs=[input_optical, input_sar], outputs=output, name='landslide_detector')\n    \n    return model","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T11:25:57.340980Z","iopub.execute_input":"2025-08-01T11:25:57.341554Z","iopub.status.idle":"2025-08-01T11:25:57.351158Z","shell.execute_reply.started":"2025-08-01T11:25:57.341529Z","shell.execute_reply":"2025-08-01T11:25:57.350422Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"# 5. MODEL COMPILATION AND TRAINING","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# 5. MODEL COMPILATION AND TRAINING\n# =============================================================================\n\ndef train_model(model, X_optical_train, X_sar_train, y_train,\n                X_optical_val, X_sar_val, y_val, \n                epochs=50, batch_size=32):\n    \"\"\"\n    Train the multi-input model with callbacks and class weighting\n    \"\"\"\n    \n    # Calculate class weights to handle imbalanced data\n    class_weights = compute_class_weight('balanced', \n                                        classes=np.unique(y_train), \n                                        y=y_train)\n    class_weight_dict = {0: class_weights[0], 1: class_weights[1]}\n    \n    print(f\"Class weights: {class_weight_dict}\")\n    \n    # Compile model\n    model.compile(\n        optimizer=Adam(learning_rate=0.001),\n        loss=BinaryCrossentropy(),\n        metrics=['accuracy', F1Score(threshold=0.5, name='f1_score')]\n    )\n    \n    # Define callbacks\n    model_checkpoint = callbacks.ModelCheckpoint(\n        'best_landslide_model.weights.h5',\n        monitor='val_f1_score',\n        mode='max',\n        save_best_only=True,\n        save_weights_only=True,\n        verbose=1\n    )\n    \n    early_stopping = callbacks.EarlyStopping(\n        monitor='val_f1_score',\n        mode='max',\n        patience=10,\n        restore_best_weights=True,\n        verbose=1\n    )\n    \n    reduce_lr = callbacks.ReduceLROnPlateau(\n        monitor='val_f1_score',\n        mode='max',\n        factor=0.5,\n        patience=5,\n        min_lr=1e-7,\n        verbose=1\n    )\n    y_train = y_train.reshape(-1, 1)\n    y_val = y_val.reshape(-1, 1)\n    # Train model\n    history = model.fit(\n        [X_optical_train, X_sar_train], y_train,\n        batch_size=batch_size,\n        epochs=epochs,\n        validation_data=([X_optical_val, X_sar_val], y_val),\n        callbacks=[model_checkpoint, early_stopping, reduce_lr],\n        class_weight=class_weight_dict,\n        verbose=1\n    )\n    \n    return history\n\ndef plot_training_history(history):\n    \"\"\"Plot training history\"\"\"\n    fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n    \n    # Plot training & validation loss\n    axes[0, 0].plot(history.history['loss'], label='Training Loss')\n    axes[0, 0].plot(history.history['val_loss'], label='Validation Loss')\n    axes[0, 0].set_title('Model Loss')\n    axes[0, 0].set_xlabel('Epoch')\n    axes[0, 0].set_ylabel('Loss')\n    axes[0, 0].legend()\n    \n    # Plot training & validation accuracy\n    axes[0, 1].plot(history.history['accuracy'], label='Training Accuracy')\n    axes[0, 1].plot(history.history['val_accuracy'], label='Validation Accuracy')\n    axes[0, 1].set_title('Model Accuracy')\n    axes[0, 1].set_xlabel('Epoch')\n    axes[0, 1].set_ylabel('Accuracy')\n    axes[0, 1].legend()\n    \n    # Plot training & validation F1 score\n    axes[1, 0].plot(history.history['f1_score'], label='Training F1 Score')\n    axes[1, 0].plot(history.history['val_f1_score'], label='Validation F1 Score')\n    axes[1, 0].set_title('Model F1 Score')\n    axes[1, 0].set_xlabel('Epoch')\n    axes[1, 0].set_ylabel('F1 Score')\n    axes[1, 0].legend()\n    \n    # Plot learning rate\n    if 'lr' in history.history:\n        axes[1, 1].plot(history.history['lr'], label='Learning Rate')\n        axes[1, 1].set_title('Learning Rate')\n        axes[1, 1].set_xlabel('Epoch')\n        axes[1, 1].set_ylabel('Learning Rate')\n        axes[1, 1].set_yscale('log')\n        axes[1, 1].legend()\n    \n    plt.tight_layout()\n    plt.savefig('training_history.png', dpi=300, bbox_inches='tight')\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T11:44:53.649755Z","iopub.execute_input":"2025-08-01T11:44:53.650328Z","iopub.status.idle":"2025-08-01T11:44:53.662274Z","shell.execute_reply.started":"2025-08-01T11:44:53.650303Z","shell.execute_reply":"2025-08-01T11:44:53.661586Z"}},"outputs":[],"execution_count":23},{"cell_type":"markdown","source":"# 6. EVALUATION AND PREDICTION","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# 6. EVALUATION AND PREDICTION\n# =============================================================================\n\ndef evaluate_model(model, X_optical_val, X_sar_val, y_val):\n    \"\"\"\n    Evaluate model performance on validation set\n    \"\"\"\n    # Make predictions\n    y_pred_proba = model.predict([X_optical_val, X_sar_val])\n    y_pred = (y_pred_proba > 0.5).astype(int).flatten()\n    \n    # Calculate metrics\n    f1 = f1_score(y_val, y_pred)\n    \n    print(\"=\" * 50)\n    print(\"VALIDATION SET EVALUATION\")\n    print(\"=\" * 50)\n    print(f\"F1 Score: {f1:.4f}\")\n    print(\"\\nClassification Report:\")\n    print(classification_report(y_val, y_pred, \n                              target_names=['No Landslide', 'Landslide']))\n    \n    print(\"\\nConfusion Matrix:\")\n    cm = confusion_matrix(y_val, y_pred)\n    print(cm)\n    \n    return f1, y_pred, y_pred_proba","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T10:49:32.242209Z","iopub.execute_input":"2025-08-01T10:49:32.242505Z","iopub.status.idle":"2025-08-01T10:49:32.247946Z","shell.execute_reply.started":"2025-08-01T10:49:32.242480Z","shell.execute_reply":"2025-08-01T10:49:32.247305Z"}},"outputs":[],"execution_count":6},{"cell_type":"markdown","source":"# 7. SUBMISSION FILE GENERATION","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# 7. SUBMISSION FILE GENERATION\n# =============================================================================\n\ndef generate_submission(model, test_df, test_optical, test_sar, filename='submission.csv'):\n    \"\"\"\n    Generate submission file for competition\n    \"\"\"\n    print(\"Generating predictions for test set...\")\n    \n    # Make predictions\n    test_predictions_proba = model.predict([test_optical, test_sar])\n    test_predictions = (test_predictions_proba > 0.5).astype(int).flatten()\n    \n    # Create submission DataFrame\n    submission_df = pd.DataFrame({\n        'ID': test_df['ID'],\n        'Target': test_predictions\n    })\n    \n    # Save to CSV\n    submission_df.to_csv(filename, index=False)\n    print(f\"Submission saved to {filename}\")\n    print(f\"Predictions summary: {np.sum(test_predictions)} landslides out of {len(test_predictions)} total\")\n    \n    return submission_df\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T10:49:47.484863Z","iopub.execute_input":"2025-08-01T10:49:47.485446Z","iopub.status.idle":"2025-08-01T10:49:47.490431Z","shell.execute_reply.started":"2025-08-01T10:49:47.485421Z","shell.execute_reply":"2025-08-01T10:49:47.489872Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"# MAIN EXECUTION PIPELINE","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# MAIN EXECUTION PIPELINE\n# =============================================================================\n\ndef main():\n    \"\"\"\n    Main execution pipeline for the landslide detection competition\n    \"\"\"\n    print(\"=\" * 60)\n    print(\"ZINDI LANDSLIDE DETECTION COMPETITION - KAGGLE VERSION\")\n    print(\"Multi-Modal Deep Learning Solution\")\n    print(\"=\" * 60)\n    \n    # =================================================================\n    # DATA PREPARATION\n    # =================================================================\n    \n    # Kaggle dataset paths\n    base_path = '/kaggle/input/classification-for-landslide-detection'\n    \n    # Load CSV files\n    train_df = pd.read_csv(f'{base_path}/Train.csv')\n    test_df = pd.read_csv(f'{base_path}/Test.csv')\n    \n    print(f\"Training samples: {len(train_df)}\")\n    print(f\"Test samples: {len(test_df)}\")\n    \n    # Load training data\n    train_data_path = f'{base_path}/train_data/train_data'\n    X_optical_full, X_sar_full, y_full = load_data(train_df, train_data_path, is_train=True)\n    \n    # Split into train and validation sets\n    (X_optical_train, X_optical_val, \n     X_sar_train, X_sar_val, \n     y_train, y_val) = train_test_split(\n        X_optical_full, X_sar_full, y_full,\n        test_size=0.2,\n        random_state=42,\n        stratify=y_full\n    )\n    \n    print(f\"\\nData split:\")\n    print(f\"Training: {len(X_optical_train)} samples\")\n    print(f\"Validation: {len(X_optical_val)} samples\")\n    \n    # =================================================================\n    # MODEL BUILDING AND TRAINING\n    # =================================================================\n    \n    # Build model\n    model = build_multi_input_model()\n    print(\"\\nModel Summary:\")\n    model.summary()\n    \n    # Train model\n    print(\"\\nStarting model training...\")\n    history = train_model(\n        model, X_optical_train, X_sar_train, y_train,\n        X_optical_val, X_sar_val, y_val,\n        epochs=50, batch_size=32\n    )\n    \n    # Plot training history\n    plot_training_history(history)\n    \n    # =================================================================\n    # MODEL EVALUATION\n    # =================================================================\n    \n    # Load best weights\n    model.load_weights('best_landslide_model.weights.h5')\n    \n    # Evaluate on validation set\n    val_f1, val_pred, val_pred_proba = evaluate_model(model, X_optical_val, X_sar_val, y_val)\n    \n    # =================================================================\n    # TEST PREDICTIONS AND SUBMISSION\n    # =================================================================\n    \n    # Load test data\n    test_data_path = f'{base_path}/test_data/test_data'\n    X_optical_test, X_sar_test = load_data(test_df, test_data_path, is_train=False)\n    \n    # Generate submission\n    submission_df = generate_submission(model, test_df, X_optical_test, X_sar_test)\n    \n    print(\"\\n\" + \"=\" * 60)\n    print(\"COMPETITION SOLUTION COMPLETED SUCCESSFULLY!\")\n    print(f\"Final Validation F1 Score: {val_f1:.4f}\")\n    print(\"Submission file: submission.csv\")\n    print(\"Model weights saved: best_landslide_model.weights.h5\")\n    print(\"Training plots saved: training_history.png\")\n    print(\"=\" * 60)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T11:54:46.654671Z","iopub.execute_input":"2025-08-01T11:54:46.655497Z","iopub.status.idle":"2025-08-01T11:54:46.665016Z","shell.execute_reply.started":"2025-08-01T11:54:46.655441Z","shell.execute_reply":"2025-08-01T11:54:46.664425Z"}},"outputs":[],"execution_count":25},{"cell_type":"markdown","source":"# ADDITIONAL UTILITY FUNCTIONS","metadata":{}},{"cell_type":"code","source":"# =============================================================================\n# ADDITIONAL UTILITY FUNCTIONS\n# =============================================================================\n\ndef analyze_data_distribution(train_df, X_optical, X_sar, y):\n    \"\"\"\n    Analyze the distribution of data for insights\n    \"\"\"\n    print(\"Data Analysis:\")\n    print(f\"Class distribution: {np.bincount(y)}\")\n    print(f\"Optical data range: [{X_optical.min():.3f}, {X_optical.max():.3f}]\")\n    print(f\"SAR data range: [{X_sar.min():.3f}, {X_sar.max():.3f}]\")\n    \n    # Visualize sample images\n    fig, axes = plt.subplots(2, 4, figsize=(16, 8))\n    \n    for i in range(2):\n        for j in range(2):\n            idx = i * 2 + j\n            \n            # Show RGB optical image\n            rgb_img = X_optical[idx, :, :, :3]  # RGB channels\n            axes[i, j*2].imshow(rgb_img)\n            axes[i, j*2].set_title(f'Sample {idx} - RGB (Label: {y[idx]})')\n            axes[i, j*2].axis('off')\n            \n            # Show SAR image (VV channel)\n            sar_img = X_sar[idx, :, :, 0]  # VV channel\n            axes[i, j*2+1].imshow(sar_img, cmap='gray')\n            axes[i, j*2+1].set_title(f'Sample {idx} - SAR VV (Label: {y[idx]})')\n            axes[i, j*2+1].axis('off')\n    \n    plt.tight_layout()\n    plt.savefig('data_samples.png', dpi=300, bbox_inches='tight')\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T10:50:18.930115Z","iopub.execute_input":"2025-08-01T10:50:18.930371Z","iopub.status.idle":"2025-08-01T10:50:18.936815Z","shell.execute_reply.started":"2025-08-01T10:50:18.930351Z","shell.execute_reply":"2025-08-01T10:50:18.936158Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# Run the main pipeline\nif __name__ == \"__main__\":\n    main()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-01T11:54:59.398391Z","iopub.execute_input":"2025-08-01T11:54:59.398998Z","iopub.status.idle":"2025-08-01T11:59:05.273794Z","shell.execute_reply.started":"2025-08-01T11:54:59.398973Z","shell.execute_reply":"2025-08-01T11:59:05.273083Z"}},"outputs":[{"name":"stdout","text":"============================================================\nZINDI LANDSLIDE DETECTION COMPETITION - KAGGLE VERSION\nMulti-Modal Deep Learning Solution\n============================================================\nTraining samples: 7147\nTest samples: 5398\nLoading training data from /kaggle/input/classification-for-landslide-detection/train_data/train_data...\nLoaded 7147 images\nOptical data shape: (7147, 64, 64, 4)\nSAR data shape: (7147, 64, 64, 8)\nLabels shape: (7147,)\nClass distribution - Landslide: 1255, No Landslide: 5892\n\nData split:\nTraining: 5717 samples\nValidation: 1430 samples\n\nModel Summary:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"landslide_detector\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"landslide_detector\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ optical_input       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m4\u001b[0m) │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_input           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m8\u001b[0m) │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_conv1       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m,    │      \u001b[38;5;34m1,184\u001b[0m │ optical_input[\u001b[38;5;34m0\u001b[0m]… │\n│ (\u001b[38;5;33mConv2D\u001b[0m)            │ \u001b[38;5;34m32\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_conv1 (\u001b[38;5;33mConv2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m,    │      \u001b[38;5;34m1,752\u001b[0m │ sar_input[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n│                     │ \u001b[38;5;34m24\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_bn1         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m,    │        \u001b[38;5;34m128\u001b[0m │ optical_conv1[\u001b[38;5;34m0\u001b[0m]… │\n│ (\u001b[38;5;33mBatchNormalizatio…\u001b[0m │ \u001b[38;5;34m32\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_bn1             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m64\u001b[0m,    │         \u001b[38;5;34m96\u001b[0m │ sar_conv1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n│ (\u001b[38;5;33mBatchNormalizatio…\u001b[0m │ \u001b[38;5;34m24\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_pool1       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m,    │          \u001b[38;5;34m0\u001b[0m │ optical_bn1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n│ (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ \u001b[38;5;34m32\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_pool1           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m,    │          \u001b[38;5;34m0\u001b[0m │ sar_bn1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n│ (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ \u001b[38;5;34m24\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_conv2       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m,    │     \u001b[38;5;34m18,496\u001b[0m │ optical_pool1[\u001b[38;5;34m0\u001b[0m]… │\n│ (\u001b[38;5;33mConv2D\u001b[0m)            │ \u001b[38;5;34m64\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_conv2 (\u001b[38;5;33mConv2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m,    │     \u001b[38;5;34m10,416\u001b[0m │ sar_pool1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n│                     │ \u001b[38;5;34m48\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_bn2         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m,    │        \u001b[38;5;34m256\u001b[0m │ optical_conv2[\u001b[38;5;34m0\u001b[0m]… │\n│ (\u001b[38;5;33mBatchNormalizatio…\u001b[0m │ \u001b[38;5;34m64\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_bn2             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m,    │        \u001b[38;5;34m192\u001b[0m │ sar_conv2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n│ (\u001b[38;5;33mBatchNormalizatio…\u001b[0m │ \u001b[38;5;34m48\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_pool2       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m,    │          \u001b[38;5;34m0\u001b[0m │ optical_bn2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n│ (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ \u001b[38;5;34m64\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_pool2           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m,    │          \u001b[38;5;34m0\u001b[0m │ sar_bn2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n│ (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ \u001b[38;5;34m48\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_conv3       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m,    │     \u001b[38;5;34m73,856\u001b[0m │ optical_pool2[\u001b[38;5;34m0\u001b[0m]… │\n│ (\u001b[38;5;33mConv2D\u001b[0m)            │ \u001b[38;5;34m128\u001b[0m)              │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_conv3 (\u001b[38;5;33mConv2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m,    │     \u001b[38;5;34m41,568\u001b[0m │ sar_pool2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n│                     │ \u001b[38;5;34m96\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_bn3         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m,    │        \u001b[38;5;34m512\u001b[0m │ optical_conv3[\u001b[38;5;34m0\u001b[0m]… │\n│ (\u001b[38;5;33mBatchNormalizatio…\u001b[0m │ \u001b[38;5;34m128\u001b[0m)              │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_bn3             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m,    │        \u001b[38;5;34m384\u001b[0m │ sar_conv3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n│ (\u001b[38;5;33mBatchNormalizatio…\u001b[0m │ \u001b[38;5;34m96\u001b[0m)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_pool3       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m128\u001b[0m) │          \u001b[38;5;34m0\u001b[0m │ optical_bn3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n│ (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_pool3           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m96\u001b[0m)  │          \u001b[38;5;34m0\u001b[0m │ sar_bn3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n│ (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_conv4       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m256\u001b[0m) │    \u001b[38;5;34m295,168\u001b[0m │ optical_pool3[\u001b[38;5;34m0\u001b[0m]… │\n│ (\u001b[38;5;33mConv2D\u001b[0m)            │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_conv4 (\u001b[38;5;33mConv2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m192\u001b[0m) │    \u001b[38;5;34m166,080\u001b[0m │ sar_pool3[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_bn4         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m256\u001b[0m) │      \u001b[38;5;34m1,024\u001b[0m │ optical_conv4[\u001b[38;5;34m0\u001b[0m]… │\n│ (\u001b[38;5;33mBatchNormalizatio…\u001b[0m │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_bn4             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m192\u001b[0m) │        \u001b[38;5;34m768\u001b[0m │ sar_conv4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]   │\n│ (\u001b[38;5;33mBatchNormalizatio…\u001b[0m │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_gap         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ optical_bn4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m] │\n│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_gap             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m192\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ sar_bn4[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n│ (\u001b[38;5;33mGlobalAveragePool…\u001b[0m │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ feature_fusion      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m448\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ optical_gap[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m… │\n│ (\u001b[38;5;33mConcatenate\u001b[0m)       │                   │            │ sar_gap[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]     │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ fc1 (\u001b[38;5;33mDense\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │    \u001b[38;5;34m114,944\u001b[0m │ feature_fusion[\u001b[38;5;34m0\u001b[0m… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dropout1 (\u001b[38;5;33mDropout\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ fc1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ fc2 (\u001b[38;5;33mDense\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │     \u001b[38;5;34m32,896\u001b[0m │ dropout1[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dropout2 (\u001b[38;5;33mDropout\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)       │          \u001b[38;5;34m0\u001b[0m │ fc2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]         │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ output (\u001b[38;5;33mDense\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)         │        \u001b[38;5;34m129\u001b[0m │ dropout2[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m0\u001b[0m]    │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ optical_input       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>) │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_input           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>) │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_conv1       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>,    │      <span style=\"color: #00af00; text-decoration-color: #00af00\">1,184</span> │ optical_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)            │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>,    │      <span style=\"color: #00af00; text-decoration-color: #00af00\">1,752</span> │ sar_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n│                     │ <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_bn1         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>,    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │ optical_conv1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalizatio…</span> │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_bn1             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>,    │         <span style=\"color: #00af00; text-decoration-color: #00af00\">96</span> │ sar_conv1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalizatio…</span> │ <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_pool1       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>,    │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ optical_bn1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_pool1           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>,    │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ sar_bn1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_conv2       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>,    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │ optical_pool1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)            │ <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>,    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">10,416</span> │ sar_pool1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n│                     │ <span style=\"color: #00af00; text-decoration-color: #00af00\">48</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_bn2         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>,    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │ optical_conv2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalizatio…</span> │ <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_bn2             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>,    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">192</span> │ sar_conv2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalizatio…</span> │ <span style=\"color: #00af00; text-decoration-color: #00af00\">48</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_pool2       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>,    │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ optical_bn2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_pool2           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>,    │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ sar_bn2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ <span style=\"color: #00af00; text-decoration-color: #00af00\">48</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_conv3       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>,    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │ optical_pool2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)            │ <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)              │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_conv3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>,    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">41,568</span> │ sar_pool2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n│                     │ <span style=\"color: #00af00; text-decoration-color: #00af00\">96</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_bn3         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>,    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │ optical_conv3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalizatio…</span> │ <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)              │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_bn3             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>,    │        <span style=\"color: #00af00; text-decoration-color: #00af00\">384</span> │ sar_conv3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalizatio…</span> │ <span style=\"color: #00af00; text-decoration-color: #00af00\">96</span>)               │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_pool3       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>) │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ optical_bn3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_pool3           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">96</span>)  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ sar_bn3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_conv4       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>) │    <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │ optical_pool3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)            │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_conv4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">192</span>) │    <span style=\"color: #00af00; text-decoration-color: #00af00\">166,080</span> │ sar_pool3[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_bn4         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>) │      <span style=\"color: #00af00; text-decoration-color: #00af00\">1,024</span> │ optical_conv4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalizatio…</span> │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_bn4             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">192</span>) │        <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span> │ sar_conv4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]   │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalizatio…</span> │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ optical_gap         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ optical_bn4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>] │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ sar_gap             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">192</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ sar_bn4[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePool…</span> │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ feature_fusion      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">448</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ optical_gap[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Concatenate</span>)       │                   │            │ sar_gap[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]     │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ fc1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │    <span style=\"color: #00af00; text-decoration-color: #00af00\">114,944</span> │ feature_fusion[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dropout1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ fc1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ fc2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │     <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │ dropout1[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ dropout2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)       │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ fc2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]         │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ output (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)         │        <span style=\"color: #00af00; text-decoration-color: #00af00\">129</span> │ dropout2[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>]    │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m759,849\u001b[0m (2.90 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">759,849</span> (2.90 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m758,169\u001b[0m (2.89 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">758,169</span> (2.89 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m1,680\u001b[0m (6.56 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,680</span> (6.56 KB)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"\nStarting model training...\nClass weights: {0: 0.6065138977296839, 1: 2.8471115537848606}\nEpoch 1/50\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 37ms/step - accuracy: 0.7314 - f1_score: 0.4944 - loss: 0.5620\nEpoch 1: val_f1_score improved from -inf to 0.00000, saving model to best_landslide_model.weights.h5\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 53ms/step - accuracy: 0.7317 - f1_score: 0.4947 - loss: 0.5616 - val_accuracy: 0.8245 - val_f1_score: 0.0000e+00 - val_loss: 0.7263 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.8459 - f1_score: 0.6609 - loss: 0.3633\nEpoch 2: val_f1_score did not improve from 0.00000\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.8459 - f1_score: 0.6609 - loss: 0.3633 - val_accuracy: 0.8245 - val_f1_score: 0.0000e+00 - val_loss: 1.5406 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.8581 - f1_score: 0.6901 - loss: 0.3278\nEpoch 3: val_f1_score improved from 0.00000 to 0.18855, saving model to best_landslide_model.weights.h5\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.8582 - f1_score: 0.6902 - loss: 0.3275 - val_accuracy: 0.8315 - val_f1_score: 0.1886 - val_loss: 0.8104 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.8800 - f1_score: 0.7274 - loss: 0.2964\nEpoch 4: val_f1_score improved from 0.18855 to 0.28378, saving model to best_landslide_model.weights.h5\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.8801 - f1_score: 0.7275 - loss: 0.2961 - val_accuracy: 0.8517 - val_f1_score: 0.2838 - val_loss: 0.4097 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9087 - f1_score: 0.7815 - loss: 0.2482\nEpoch 5: val_f1_score improved from 0.28378 to 0.55211, saving model to best_landslide_model.weights.h5\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.9087 - f1_score: 0.7814 - loss: 0.2479 - val_accuracy: 0.8888 - val_f1_score: 0.5521 - val_loss: 0.4222 - learning_rate: 0.0010\nEpoch 6/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.9129 - f1_score: 0.7925 - loss: 0.2209\nEpoch 6: val_f1_score improved from 0.55211 to 0.59919, saving model to best_landslide_model.weights.h5\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.9129 - f1_score: 0.7924 - loss: 0.2208 - val_accuracy: 0.8615 - val_f1_score: 0.5992 - val_loss: 0.3287 - learning_rate: 0.0010\nEpoch 7/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.9093 - f1_score: 0.7856 - loss: 0.2145\nEpoch 7: val_f1_score improved from 0.59919 to 0.67317, saving model to best_landslide_model.weights.h5\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.9093 - f1_score: 0.7856 - loss: 0.2144 - val_accuracy: 0.9063 - val_f1_score: 0.6732 - val_loss: 0.3080 - learning_rate: 0.0010\nEpoch 8/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9271 - f1_score: 0.8232 - loss: 0.1778\nEpoch 8: val_f1_score did not improve from 0.67317\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9271 - f1_score: 0.8231 - loss: 0.1778 - val_accuracy: 0.8741 - val_f1_score: 0.4512 - val_loss: 0.7927 - learning_rate: 0.0010\nEpoch 9/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9346 - f1_score: 0.8391 - loss: 0.1577\nEpoch 9: val_f1_score improved from 0.67317 to 0.71981, saving model to best_landslide_model.weights.h5\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.9345 - f1_score: 0.8389 - loss: 0.1578 - val_accuracy: 0.9189 - val_f1_score: 0.7198 - val_loss: 0.2662 - learning_rate: 0.0010\nEpoch 10/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9450 - f1_score: 0.8623 - loss: 0.1338\nEpoch 10: val_f1_score did not improve from 0.71981\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9450 - f1_score: 0.8621 - loss: 0.1339 - val_accuracy: 0.8357 - val_f1_score: 0.1199 - val_loss: 3.4309 - learning_rate: 0.0010\nEpoch 11/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9379 - f1_score: 0.8468 - loss: 0.1458\nEpoch 11: val_f1_score did not improve from 0.71981\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9379 - f1_score: 0.8468 - loss: 0.1458 - val_accuracy: 0.8231 - val_f1_score: 0.5029 - val_loss: 0.5963 - learning_rate: 0.0010\nEpoch 12/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9472 - f1_score: 0.8681 - loss: 0.1234\nEpoch 12: val_f1_score did not improve from 0.71981\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9471 - f1_score: 0.8681 - loss: 0.1233 - val_accuracy: 0.4608 - val_f1_score: 0.3905 - val_loss: 4.1113 - learning_rate: 0.0010\nEpoch 13/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9613 - f1_score: 0.9007 - loss: 0.0975\nEpoch 13: val_f1_score did not improve from 0.71981\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9609 - f1_score: 0.8998 - loss: 0.0981 - val_accuracy: 0.7420 - val_f1_score: 0.5591 - val_loss: 0.5288 - learning_rate: 0.0010\nEpoch 14/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.9464 - f1_score: 0.8664 - loss: 0.1192\nEpoch 14: val_f1_score did not improve from 0.71981\n\nEpoch 14: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9464 - f1_score: 0.8663 - loss: 0.1192 - val_accuracy: 0.8077 - val_f1_score: 0.6259 - val_loss: 0.6424 - learning_rate: 0.0010\nEpoch 15/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9646 - f1_score: 0.9072 - loss: 0.0886\nEpoch 15: val_f1_score improved from 0.71981 to 0.77434, saving model to best_landslide_model.weights.h5\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.9647 - f1_score: 0.9073 - loss: 0.0883 - val_accuracy: 0.9287 - val_f1_score: 0.7743 - val_loss: 0.2807 - learning_rate: 5.0000e-04\nEpoch 16/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9773 - f1_score: 0.9398 - loss: 0.0477\nEpoch 16: val_f1_score did not improve from 0.77434\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9774 - f1_score: 0.9399 - loss: 0.0476 - val_accuracy: 0.9196 - val_f1_score: 0.7255 - val_loss: 0.4516 - learning_rate: 5.0000e-04\nEpoch 17/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9877 - f1_score: 0.9663 - loss: 0.0321\nEpoch 17: val_f1_score did not improve from 0.77434\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9877 - f1_score: 0.9662 - loss: 0.0321 - val_accuracy: 0.9182 - val_f1_score: 0.7181 - val_loss: 0.6161 - learning_rate: 5.0000e-04\nEpoch 18/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9902 - f1_score: 0.9730 - loss: 0.0292\nEpoch 18: val_f1_score did not improve from 0.77434\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9902 - f1_score: 0.9730 - loss: 0.0292 - val_accuracy: 0.9301 - val_f1_score: 0.7653 - val_loss: 0.4910 - learning_rate: 5.0000e-04\nEpoch 19/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.9884 - f1_score: 0.9684 - loss: 0.0278\nEpoch 19: val_f1_score did not improve from 0.77434\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.9884 - f1_score: 0.9683 - loss: 0.0278 - val_accuracy: 0.9077 - val_f1_score: 0.7040 - val_loss: 0.7428 - learning_rate: 5.0000e-04\nEpoch 20/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.9880 - f1_score: 0.9672 - loss: 0.0330\nEpoch 20: val_f1_score improved from 0.77434 to 0.78205, saving model to best_landslide_model.weights.h5\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.9880 - f1_score: 0.9672 - loss: 0.0330 - val_accuracy: 0.9287 - val_f1_score: 0.7821 - val_loss: 0.3827 - learning_rate: 5.0000e-04\nEpoch 21/50\n\u001b[1m178/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9896 - f1_score: 0.9716 - loss: 0.0239\nEpoch 21: val_f1_score did not improve from 0.78205\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9896 - f1_score: 0.9716 - loss: 0.0239 - val_accuracy: 0.9322 - val_f1_score: 0.7760 - val_loss: 0.5935 - learning_rate: 5.0000e-04\nEpoch 22/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9847 - f1_score: 0.9585 - loss: 0.0386\nEpoch 22: val_f1_score did not improve from 0.78205\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9847 - f1_score: 0.9586 - loss: 0.0386 - val_accuracy: 0.9322 - val_f1_score: 0.7810 - val_loss: 0.6718 - learning_rate: 5.0000e-04\nEpoch 23/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9941 - f1_score: 0.9837 - loss: 0.0159\nEpoch 23: val_f1_score did not improve from 0.78205\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9941 - f1_score: 0.9836 - loss: 0.0159 - val_accuracy: 0.9231 - val_f1_score: 0.7477 - val_loss: 0.6587 - learning_rate: 5.0000e-04\nEpoch 24/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9976 - f1_score: 0.9934 - loss: 0.0076\nEpoch 24: val_f1_score did not improve from 0.78205\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9976 - f1_score: 0.9932 - loss: 0.0077 - val_accuracy: 0.7657 - val_f1_score: 0.5910 - val_loss: 1.6425 - learning_rate: 5.0000e-04\nEpoch 25/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.9844 - f1_score: 0.9575 - loss: 0.0539\nEpoch 25: val_f1_score did not improve from 0.78205\n\nEpoch 25: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.9844 - f1_score: 0.9577 - loss: 0.0536 - val_accuracy: 0.9154 - val_f1_score: 0.7012 - val_loss: 0.6811 - learning_rate: 5.0000e-04\nEpoch 26/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9956 - f1_score: 0.9878 - loss: 0.0117\nEpoch 26: val_f1_score improved from 0.78205 to 0.83065, saving model to best_landslide_model.weights.h5\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 16ms/step - accuracy: 0.9956 - f1_score: 0.9879 - loss: 0.0117 - val_accuracy: 0.9413 - val_f1_score: 0.8306 - val_loss: 0.3146 - learning_rate: 2.5000e-04\nEpoch 27/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9978 - f1_score: 0.9938 - loss: 0.0040\nEpoch 27: val_f1_score did not improve from 0.83065\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9978 - f1_score: 0.9938 - loss: 0.0040 - val_accuracy: 0.9343 - val_f1_score: 0.7873 - val_loss: 0.4562 - learning_rate: 2.5000e-04\nEpoch 28/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9998 - f1_score: 0.9995 - loss: 0.0019\nEpoch 28: val_f1_score did not improve from 0.83065\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9998 - f1_score: 0.9995 - loss: 0.0019 - val_accuracy: 0.9392 - val_f1_score: 0.8214 - val_loss: 0.3450 - learning_rate: 2.5000e-04\nEpoch 29/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9998 - f1_score: 0.9995 - loss: 8.4513e-04\nEpoch 29: val_f1_score did not improve from 0.83065\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9998 - f1_score: 0.9995 - loss: 8.4686e-04 - val_accuracy: 0.9420 - val_f1_score: 0.8274 - val_loss: 0.3702 - learning_rate: 2.5000e-04\nEpoch 30/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9998 - f1_score: 0.9994 - loss: 7.8506e-04\nEpoch 30: val_f1_score did not improve from 0.83065\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9998 - f1_score: 0.9994 - loss: 7.8516e-04 - val_accuracy: 0.9413 - val_f1_score: 0.8257 - val_loss: 0.3745 - learning_rate: 2.5000e-04\nEpoch 31/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 14ms/step - accuracy: 0.9989 - f1_score: 0.9969 - loss: 0.0030\nEpoch 31: val_f1_score did not improve from 0.83065\n\nEpoch 31: ReduceLROnPlateau reducing learning rate to 0.0001250000059371814.\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9989 - f1_score: 0.9969 - loss: 0.0030 - val_accuracy: 0.9350 - val_f1_score: 0.8098 - val_loss: 0.4149 - learning_rate: 2.5000e-04\nEpoch 32/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9999 - f1_score: 0.9998 - loss: 6.2381e-04\nEpoch 32: val_f1_score did not improve from 0.83065\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 0.9999 - f1_score: 0.9998 - loss: 6.2260e-04 - val_accuracy: 0.9378 - val_f1_score: 0.8134 - val_loss: 0.4188 - learning_rate: 1.2500e-04\nEpoch 33/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 1.0000 - f1_score: 1.0000 - loss: 4.1558e-04\nEpoch 33: val_f1_score did not improve from 0.83065\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 1.0000 - f1_score: 1.0000 - loss: 4.1512e-04 - val_accuracy: 0.9406 - val_f1_score: 0.8211 - val_loss: 0.4260 - learning_rate: 1.2500e-04\nEpoch 34/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 1.0000 - f1_score: 1.0000 - loss: 2.8597e-04\nEpoch 34: val_f1_score did not improve from 0.83065\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 1.0000 - f1_score: 1.0000 - loss: 2.8692e-04 - val_accuracy: 0.9385 - val_f1_score: 0.8159 - val_loss: 0.4270 - learning_rate: 1.2500e-04\nEpoch 35/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 1.0000 - f1_score: 1.0000 - loss: 4.0728e-04\nEpoch 35: val_f1_score did not improve from 0.83065\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 1.0000 - f1_score: 1.0000 - loss: 4.0562e-04 - val_accuracy: 0.9427 - val_f1_score: 0.8263 - val_loss: 0.4488 - learning_rate: 1.2500e-04\nEpoch 36/50\n\u001b[1m177/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 1.0000 - f1_score: 1.0000 - loss: 3.4884e-04\nEpoch 36: val_f1_score did not improve from 0.83065\n\nEpoch 36: ReduceLROnPlateau reducing learning rate to 6.25000029685907e-05.\n\u001b[1m179/179\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 15ms/step - accuracy: 1.0000 - f1_score: 1.0000 - loss: 3.5029e-04 - val_accuracy: 0.9427 - val_f1_score: 0.8255 - val_loss: 0.4538 - learning_rate: 1.2500e-04\nEpoch 36: early stopping\nRestoring model weights from the end of the best epoch: 26.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1500x1000 with 4 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 28ms/step\n==================================================\nVALIDATION SET EVALUATION\n==================================================\nF1 Score: 0.8306\n\nClassification Report:\n              precision    recall  f1-score   support\n\nNo Landslide       0.96      0.97      0.96      1179\n   Landslide       0.84      0.82      0.83       251\n\n    accuracy                           0.94      1430\n   macro avg       0.90      0.89      0.90      1430\nweighted avg       0.94      0.94      0.94      1430\n\n\nConfusion Matrix:\n[[1140   39]\n [  45  206]]\nLoading test data from /kaggle/input/classification-for-landslide-detection/test_data/test_data...\nLoaded 5398 images\nOptical data shape: (5398, 64, 64, 4)\nSAR data shape: (5398, 64, 64, 8)\nGenerating predictions for test set...\n\u001b[1m169/169\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step\nSubmission saved to submission.csv\nPredictions summary: 725 landslides out of 5398 total\n\n============================================================\nCOMPETITION SOLUTION COMPLETED SUCCESSFULLY!\nFinal Validation F1 Score: 0.8306\nSubmission file: submission.csv\nModel weights saved: best_landslide_model.weights.h5\nTraining plots saved: training_history.png\n============================================================\n","output_type":"stream"}],"execution_count":26}]}